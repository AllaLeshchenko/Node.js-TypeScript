{"version":3,"file":"sequenceUtils.js","sourceRoot":"","sources":["../../src/modules/sequenceUtils.ts"],"names":[],"mappings":"AAAA,6DAA6D;AAE7D,+DAA+D;AAC/D,MAAM,UAAU,iBAAiB,CAAC,KAAa;IAC3C,MAAM,QAAQ,GAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAClC,OAAO,IAAI,EAAE,CAAC;QACV,MAAM,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC3E,IAAI,IAAI,GAAG,KAAK;YAAE,MAAM;QACxB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxB,CAAC;IACD,OAAO,QAAQ,CAAC;AACpB,CAAC;AAED,gDAAgD;AAChD,MAAM,UAAU,oBAAoB,CAAC,KAAa;IAC9C,MAAM,MAAM,GAAa,EAAE,CAAC;IAC5B,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,IAAI,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC;QACpC,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC;gBAChB,OAAO,GAAG,KAAK,CAAC;gBAChB,MAAM;YACV,CAAC;QACL,CAAC;QACD,IAAI,OAAO,EAAE,CAAC;YACV,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,CAAC;IACL,CAAC;IACD,OAAO,MAAM,CAAC;AAClB,CAAC","sourcesContent":["// task4 - Модули для работы с числовыми последовательностями\r\n\r\n// Генерация последовательности Фибоначчи до указанного предела\r\nexport function generateFibonacci(limit: number): number[] {\r\n    const sequence: number[] = [0, 1];\r\n    while (true) {\r\n        const next = sequence[sequence.length - 1] + sequence[sequence.length - 2];\r\n        if (next > limit) break;\r\n        sequence.push(next);\r\n    }\r\n    return sequence;\r\n}\r\n\r\n// Генерация простых чисел до указанного предела\r\nexport function generatePrimeNumbers(limit: number): number[] {\r\n    const primes: number[] = [];\r\n    for (let num = 2; num <= limit; num++) {\r\n        let isPrime = true;\r\n        for (let i = 2; i <= Math.sqrt(num); i++) {\r\n            if (num % i === 0) {\r\n                isPrime = false;\r\n                break;\r\n            }\r\n        }\r\n        if (isPrime) {\r\n            primes.push(num);\r\n        }\r\n    }\r\n    return primes;\r\n}"]}