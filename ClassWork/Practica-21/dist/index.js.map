{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Абстрактный класс\r\nabstract class Animal {\r\n    eat(): void {\r\n        console.log('Это животное ест');\r\n    }\r\n    abstract makeSound(): void;\r\n}\r\n\r\n// const animal = new Animal();\r\n\r\nclass Dog extends Animal{\r\n    makeSound(): void {\r\n        console.log('Собака лает');\r\n    }\r\n}\r\n\r\nclass Cat extends Animal{\r\n    makeSound(): void {\r\n        console.log('Кошка мяукает');\r\n    }\r\n}\r\n\r\nconst sharik = new Dog();\r\nconsole.log(sharik);\r\nsharik.eat();\r\nsharik.makeSound();\r\n\r\nconst myrka = new Cat();\r\nmyrka.eat();\r\nmyrka.makeSound();\r\n\r\n\r\n// Создайте абстрактный класс `Employee`, который будет представлять сотрудника. В этом классе определите абстрактный метод `calculateSalary()`. Этот метод должен возвращать зарплату сотрудника, но не должен иметь реализации в самом `Employee`.\r\n// Создайте два класса, которые будут наследовать `Employee`:\r\n// `FullTimeEmployee` — для сотрудников на полной ставке.\r\n// `PartTimeEmployee` — для сотрудников, работающих неполный рабочий день.\r\n// В каждом из этих классов реализуйте метод `calculateSalary()` по-своему:\r\n// В `FullTimeEmployee` зарплата может рассчитываться как фиксированная сумма.\r\n// В `PartTimeEmployee` зарплата может зависеть от количества отработанных часов и почасовой ставки.\r\nabstract class Employee{\r\n    constructor(public name: string){}\r\n\r\n    abstract calculateSalary(): number;\r\n}\r\n\r\nclass FullTimeEmployee extends Employee {\r\n    constructor(name: string, private fixedSalary: number){\r\n        super(name);\r\n    }\r\n\r\n    calculateSalary(): number {\r\n        return this.fixedSalary;\r\n    }\r\n}\r\n\r\nclass PartTimeEmployee extends Employee{\r\n    constructor(name: string, private hoursWork: number, private hourRate: number){\r\n        super(name);\r\n    }\r\n\r\n    calculateSalary(): number {\r\n        return this.hoursWork * this.hourRate;\r\n    }\r\n}\r\nconst johnFullTime = new FullTimeEmployee('john', 3000);\r\nconst annaPartTime = new PartTimeEmployee('Anna', 120, 30);\r\n\r\nconsole.log(johnFullTime);\r\nconsole.log(annaPartTime);\r\n\r\nconsole.log(johnFullTime.calculateSalary());\r\nconsole.log(annaPartTime.calculateSalary());\r\n\r\n\r\n\r\n// Создайте абстрактный класс `Vehicle`, в котором будет абстрактный метод `move()`.\r\n// Реализуйте два класса — `Car` и `Plane`, которые будут наследовать `Vehicle` и по-разному реализовывать метод `move()`:\r\n// `Car` должен выводить сообщение \"Машина едет по дороге\".\r\n// `Plane` должен выводить сообщение \"Самолёт летит по воздуху\".\r\n// Создайте массив типа `Vehicle[]`, включающий в себя объекты классов `Car` и `Plane`.\r\n// Реализуйте цикл, который проходит по массиву и вызывает метод `move()` для каждого элемента, выводя соответствующее сообщение.\r\nabstract class Vehicle{\r\n    abstract move(): void;\r\n}\r\nclass Car extends Vehicle{\r\n    move(): void {\r\n        console.log('Машина едет по дороге');\r\n    }\r\n    honk(): void {\r\n        console.log('би-би')\r\n    }\r\n}\r\nclass Plane extends Vehicle{\r\n    move(): void {\r\n        console.log('Самолёт летит по воздуху');\r\n    }\r\n    flyHeight(): void {\r\n        console.log('Высота 10000м')\r\n    }\r\n}\r\n\r\nconst vehicles : Vehicle[] = [\r\n    new Car(),\r\n    new Plane(),\r\n]\r\nconst car: Vehicle = new Car();  \r\ncar.move();\r\n\r\nvehicles.forEach(vehicle => vehicle.move());"]}