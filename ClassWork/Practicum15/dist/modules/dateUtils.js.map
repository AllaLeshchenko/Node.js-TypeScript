{"version":3,"file":"dateUtils.js","sourceRoot":"","sources":["../../src/modules/dateUtils.ts"],"names":[],"mappings":"AAAA,MAAM,KAAW,SAAS,CAoBzB;AApBD,WAAiB,SAAS;IAEzB,SAAgB,UAAU,CAAC,IAAU;QACpC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAChC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QAC3D,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACpD,OAAO,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,EAAE,CAAC;IAClC,CAAC;IALe,oBAAU,aAKzB,CAAA;IAED,SAAgB,WAAW,CAAC,SAAe,EAAE,OAAa;QACzD,iDAAiD;QACjD,mEAAmE;QACnE,IAAI;QACJ,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC;QAC/D,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QACtD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;QAC5E,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC;QACpE,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,GAAG,CAAC,IAAI,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QACxD,OAAO,oBAAoB,IAAI,WAAW,KAAK,WAAW,OAAO,YAAY,OAAO,EAAE,CAAC;IACxF,CAAC;IAVe,qBAAW,cAU1B,CAAA;AACF,CAAC,EApBgB,SAAS,KAAT,SAAS,QAoBzB;AAGD,+BAA+B;AAC/B,wDAAwD;AACxD,2CAA2C;AAC3C,oEAAoE;AACpE,+DAA+D;AAC/D,2CAA2C;AAC3C,QAAQ;AAGR,uDAAuD;AACvD,sEAAsE;AACtE,6CAA6C;AAE7C,wFAAwF;AACxF,sFAAsF;AAEtF,gEAAgE;AAChE,2CAA2C;AAC3C,QAAQ;AACR,IAAI","sourcesContent":["export namespace DateUtils {\r\n\r\n export function formatDate(date: Date): string {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, '0');\r\n  const day = String(date.getDate()).padStart(2, '0');\r\n  return `${year}-${month}-${day}`;\r\n }\r\n \r\n export function daysBetween(startDate: Date, endDate: Date): string {\r\n  // if (startDate.getTime() > endDate.getTime()) {\r\n  // throw new Error('Конечная дата не может быть раньше начальной');\r\n  // }\r\n  const diff = Math.abs(endDate.getTime() - startDate.getTime());\r\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24));\r\n  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n  const seconds = Math.floor((diff % (1000 * 60)) / 1000);\r\n  return `Осталось:\\n дней:${days}, часов:${hours}, минут:${minutes}, секунд:${seconds}`;\r\n }\r\n}\r\n\r\n\r\n// export namespace DateUtils {\r\n//     export function formatDate (date: Date): string {\r\n//         const year = date.getFullYear();\r\n//         const month = String(date.getMonth()+1).padStart(2, '0');\r\n//         const day = String(date.getDate()).padStart(2, '0');\r\n//         return `${year}-${month}-${day}`\r\n//     }\r\n\r\n\r\n//     // Возвращает количество дней между двумя датами\r\n//     export function daysBetween(date1: Date, date2: Date): number {\r\n//       const msInDay = 1000 * 60 * 60 * 24;\r\n    \r\n//       const start = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());\r\n//       const end = new Date(date2.getFullYear(), date2.getMonth(), date2.getDate());\r\n    \r\n//       const diff = Math.abs(end.getTime() - start.getTime());\r\n//       return Math.floor(diff / msInDay);\r\n//     }\r\n// }\r\n\r\n\r\n\r\n"]}