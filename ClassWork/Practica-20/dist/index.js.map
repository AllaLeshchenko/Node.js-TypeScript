{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";AAAA,kBAAkB;AAClB,iBAAiB;AACjB,eAAe;AACf,oBAAoB;AACpB,mBAAmB;AACnB,8CAA8C;AAC9C,4BAA4B;AAC5B,0BAA0B;AAC1B,QAAQ;AACR,sBAAsB;AACtB,+EAA+E;AAC/E,QAAQ;AACR,IAAI;AACJ,qBAAqB;AACrB,qFAAqF;AACrF,4CAA4C;AAC5C,iDAAiD;AACjD,eAAe;AACf,8DAA8D;AAC9D,IAAI;AAEJ,qCAAqC;AACrC,sCAAsC;AAEtC,qBAAqB;AACrB,sBAAsB;AAEtB,gBAAgB;AAChB,iBAAiB;AAGjB,sGAAsG;AACtG,4FAA4F;AAC5F,6BAA6B;AAC7B,gGAAgG;AAChG,gBAAgB;AAChB,MAAM,KAAK;IACY;IAAqB;IAAxC,YAAmB,IAAY,EAAS,GAAW;QAAhC,SAAI,GAAJ,IAAI,CAAQ;QAAS,QAAG,GAAH,GAAG,CAAQ;IAAI,CAAC;IACxD,KAAK;QACD,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,CAAC,IAAI,aAAa,IAAI,CAAC,GAAG,EAAE,CAAC,CAAA;IACnE,CAAC;CACJ;AACD,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AACpC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAEpC,KAAK,CAAC,KAAK,EAAE,CAAC;AACd,KAAK,CAAC,KAAK,EAAE,CAAC;AAId,8BAA8B;AAC9B,MAAM,IAAI;IACE,QAAQ,CAAS;IAEzB,YAAY,QAAgB;QACxB,IAAI,CAAC,QAAQ,GAAE,QAAQ,CAAC;IAC5B,CAAC;IAEO,eAAe;QACnB,OAAO,aAAa,IAAI,CAAC,QAAQ,EAAE,CAAC;IACxC,CAAC;IAEM,YAAY;QACf,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IACtC,CAAC;CACJ;AACD,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;AAC/B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAClB,8BAA8B;AAC9B,qCAAqC;AACrC,IAAI,CAAC,YAAY,EAAE,CAAC;AAGpB,+BAA+B;AAC/B,MAAM,MAAM;IAEoB;IADnB,OAAO,GAAW,OAAO,CAAC;IACnC,YAA4B,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;IAAE,CAAC;CAC9C;AAED,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;AACjC,4BAA4B;AAC5B,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAI5B,6FAA6F;AAC7F,gBAAgB;AAChB,wGAAwG;AACxG,sDAAsD;AACtD,sGAAsG;AACtG,qDAAqD","sourcesContent":["// Создание класса\r\n// Обычная версия\r\n// class User {\r\n//     name: string;\r\n//     age: number;\r\n//     constructor(name: string, age: number){\r\n//         this.name = name;\r\n//         this.age = age;\r\n//     }\r\n//     greet(): void {\r\n//         console.log(`Hello! My name is ${this.name}. My age - ${this.age}`);\r\n//     }\r\n// }\r\n// Сокращенная версия\r\n// Когда для параметра конструктора прописываем модификатор доступа, то в этот момент\r\n// описывается свойство для будущего объекта\r\n// инициализируется свойство для будущего объекта\r\n// class User {\r\n//     constructor(public name: string, public age: number){ }\r\n// }\r\n\r\n// const user = new User('John', 25);\r\n// const user2 = new User('Olga', 20);\r\n\r\n// console.log(user);\r\n// console.log(user2);\r\n\r\n// user.greet();\r\n// user2.greet();\r\n\r\n\r\n// 1. Создайте класс `User`, который имеет два свойства: `name` (тип `string`) и `age` (тип `number`).\r\n// 2. Напишите конструктор, который принимает значения для имени и возраста и присваивает их\r\n// соответствующим свойствам.\r\n// 3. Добавьте метод `greet`, который выводит в консоль сообщение с приветствием, включающим имя\r\n// пользователя.\r\nclass User1 {\r\n    constructor(public name: string, public age: number) { }\r\n    greet(): void {\r\n        console.log(`Hello, my name ${this.name} and have ${this.age}`)\r\n    }\r\n}\r\nconst user1 = new User1('Alex', 27);\r\nconst user3 = new User1('Anna', 37);\r\n\r\nuser1.greet();\r\nuser3.greet();\r\n\r\n\r\n\r\n// Модификатор доступа private\r\nclass User {\r\n    private password: string;\r\n\r\n    constructor(password: string){\r\n        this.password =password;\r\n    }\r\n\r\n    private encryptPassword(): string {\r\n        return `encrypted-${this.password}`;\r\n    }\r\n\r\n    public showPassword(): void {\r\n        console.log(this.encryptPassword);\r\n    }\r\n}\r\nconst user = new User('12345');\r\nconsole.log(user);\r\n// console.log(user.password);\r\n// console.log(this.encryptPassword);\r\nuser.showPassword();\r\n\r\n\r\n// Модификатор доступа readonly\r\nclass Config {\r\n    readonly version: string = '1.0.0';\r\n    constructor(public readonly name: string){}\r\n}\r\n\r\nconst config = new Config('App');\r\n// config.version = '1.0.1';\r\nconsole.log(config.version);\r\n\r\n\r\n\r\n// Измените класс `User`, добавив приватное свойство `password`, которое будет хранить пароль\r\n// пользователя.\r\n// 2. Добавьте публичный метод для установки пароля (например, `setPassword(password: string)`), который\r\n// позволит менять значение этого приватного свойства.\r\n// 3. Создайте публичный метод `checkPassword(password: string)`, который будет проверять корректность\r\n// введенного пароля и возвращать `true` или `false`."]}